# encoding: utf-8
require 'spec_helper'

describe "User pages" do

  subject { page }

  describe "index" do
    let(:user) { FactoryGirl.create(:user) }

    before(:all) { 30.times { FactoryGirl.create(:user) } }
    after(:all)  { User.delete_all }

    before(:each) do
      sign_in user
      visit users_path
    end

    it { should_not have_selector('title', text: 'Käyttäjät') }
    it { should_not have_selector('h1',    text: 'Kaikki käyttäjät') }
    
    describe "as an admin user" do
      let(:admin) { FactoryGirl.create(:admin) }
      before do
        sign_in admin
        visit users_path
      end

      it { should have_selector('title', text: 'Käyttäjät') }
      it { should have_selector('h1',    text: 'Kaikki käyttäjät') }
    end
      
    describe "pagination" do
      describe "as an admin user" do
        let(:admin) { FactoryGirl.create(:admin) }
        before do
          sign_in admin
          visit users_path
        end

        it { should have_selector('div.pagination') }
        it "should list each user" do
          User.paginate(page: 1).each do |user|
            page.should have_selector('li', text: user.name)
          end
        end
      end
    end
    
    describe "delete links" do

      it { should_not have_link('Poista') }

      describe "as an admin user" do
        let(:admin) { FactoryGirl.create(:admin) }
        before do
          sign_in admin
          visit users_path
        end

        it { should have_link('Poista', href: user_path(User.first)) }
        it "should be able to delete another user" do
          expect { click_link('Poista') }.to change(User, :count).by(-1)
        end
        it { should_not have_link('Poista', href: user_path(admin)) }
      end
    end
    
  end
  
  describe "signup page" do
    before { visit signup_path }

    it { should have_selector('h1',    text: 'Luo käyttäjä') }
    it { should have_selector('title', text: full_title('Luo käyttäjä')) }
  end
  
  describe "profile page" do
    let(:user) { FactoryGirl.create(:user) }
    before { visit user_path(user) }

    it { should have_content(user.name) }
    it { should have_selector('title', text: user.name) }
  end
  
  describe "signup" do

    before { visit signup_path }

    let(:submit) { "Luo tilini" }

    describe "with invalid information" do
      it "should not create a user" do
        expect { click_button submit }.not_to change(User, :count)
      end
      
      describe "after submission" do
        before { click_button submit }

        it { should have_selector('title', text: 'Luo käyttäjä') }
        it { should have_content('virhettä') }
      end
    end

    describe "with valid information" do
      before do
        fill_in "Nimi",         with: "Example User"
        fill_in "Sähköposti",        with: "user@example.com"
        fill_in "Salasana",     with: "foobar"
        fill_in "Varmistus", with: "foobar"
      end

      it "should create a user" do
        expect { click_button submit }.to change(User, :count).by(1)
      end
      
      describe "after saving the user" do
        before { click_button submit }
        let(:user) { User.find_by_email('user@example.com') }

        it { should have_selector('title', text: user.name) }
        it { should have_selector('div.alert.alert-success', text: 'Tervetuloa uusi käyttäjä!') }
        it { should have_link('Kirjaudu ulos') }
      end
    end
  end
  
  describe "edit" do
    let(:user) { FactoryGirl.create(:user) }
    before do
      sign_in user
      visit edit_user_path(user)
    end
   
    describe "page" do
      it { should have_selector('h1',    text: "Muokkaa profiilia") }
      it { should have_selector('title', text: "Muokkaa") }
      it { should have_link('Vaihda kuva', href: 'http://gravatar.com/emails') }
    end

    describe "with invalid information" do
      before { click_button "Tallenna muutokset" }

      it { should have_content('error') }
    end
    
    describe "with valid information" do
      let(:new_name)  { "New Name" }
      let(:new_email) { "new@example.com" }
      before do
        fill_in "Nimi",             with: new_name
        fill_in "Sähköposti",       with: new_email
        fill_in "Salasana",         with: user.password
        fill_in "Varmista Salasana", with: user.password
        click_button "Tallenna muutokset"
      end

      it { should have_selector('title', text: new_name) }
      it { should have_selector('div.alert.alert-success') }
      it { should have_link('Kirjaudu ulos', href: signout_path) }
      specify { user.reload.name.should  == new_name }
      specify { user.reload.email.should == new_email }
    end
  end
end
